
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;



/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author LENOVO
 */
public class appCatatanHarian extends javax.swing.JFrame {
    private DefaultListModel<String> catatanListModel;
    private ArrayList<String> catatan;

    /**
     * Creates new form appCatatanHarian
     */
    public appCatatanHarian() {
  
        initComponents();
        catatanListModel = new DefaultListModel<>();
        listCatatan.setModel(catatanListModel);
        catatan = new ArrayList<>();
        listCatatan.addListSelectionListener(evt -> tampilkanKonten());
       
        resetField();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        JudulText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        areaKonten = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listCatatan = new javax.swing.JList<>();
        btnTambah = new javax.swing.JButton();
        btnUbah = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();
        btnKeluar = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        btnImport = new javax.swing.JButton();
        btnBersihkan = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        jLabel1.setText("Judul :");

        JudulText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JudulTextActionPerformed(evt);
            }
        });

        areaKonten.setColumns(20);
        areaKonten.setRows(5);
        jScrollPane1.setViewportView(areaKonten);

        jLabel2.setText("Tulis Catatan :");

        listCatatan.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listCatatanValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listCatatan);

        btnTambah.setBackground(new java.awt.Color(102, 255, 51));
        btnTambah.setText("tambah");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        btnUbah.setBackground(new java.awt.Color(255, 255, 102));
        btnUbah.setText("ubah");
        btnUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUbahActionPerformed(evt);
            }
        });

        btnHapus.setBackground(new java.awt.Color(255, 0, 0));
        btnHapus.setForeground(new java.awt.Color(255, 255, 255));
        btnHapus.setText("hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnExport.setBackground(new java.awt.Color(255, 204, 255));
        btnExport.setText("export");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        btnKeluar.setBackground(new java.awt.Color(153, 102, 0));
        btnKeluar.setForeground(new java.awt.Color(255, 255, 255));
        btnKeluar.setText("keluar");
        btnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKeluarActionPerformed(evt);
            }
        });

        btnReset.setBackground(new java.awt.Color(102, 255, 204));
        btnReset.setText("reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        btnImport.setBackground(new java.awt.Color(255, 255, 204));
        btnImport.setText("import");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        btnBersihkan.setBackground(new java.awt.Color(255, 102, 255));
        btnBersihkan.setText("bersihkan");
        btnBersihkan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBersihkanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(48, 48, 48)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1)
                                    .addComponent(JudulText))
                                .addGap(62, 62, 62))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(392, 392, 392)
                                .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnKeluar, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnTambah)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnUbah)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnHapus)
                                .addGap(18, 18, 18)
                                .addComponent(btnReset)
                                .addGap(18, 18, 18)
                                .addComponent(btnBersihkan)))
                        .addGap(18, 18, 18)
                        .addComponent(btnExport)
                        .addGap(18, 18, 18)
                        .addComponent(btnImport)))
                .addContainerGap(106, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(JudulText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(39, 39, 39)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(96, 96, 96)
                                        .addComponent(jLabel2)))))
                        .addGap(43, 43, 43)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnTambah)
                            .addComponent(btnUbah)
                            .addComponent(btnHapus)
                            .addComponent(btnExport)
                            .addComponent(btnReset)
                            .addComponent(btnBersihkan)
                            .addComponent(btnImport))))
                .addGap(18, 18, 18)
                .addComponent(btnKeluar)
                .addContainerGap(311, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JudulTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JudulTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JudulTextActionPerformed

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        // TODO add your handling code here:
         tambahCatatan();
    }//GEN-LAST:event_btnTambahActionPerformed

    private void btnUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUbahActionPerformed
        // TODO add your handling code here:
        ubahCatatan();
    }//GEN-LAST:event_btnUbahActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // TODO add your handling code here:
        hapusCatatan();
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        // TODO add your handling code here:
        eksporKeFileTxt();
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        // TODO add your handling code here:
        imporDariFileTxt();
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKeluarActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnKeluarActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        resetField();
         resetDaftar();
    }//GEN-LAST:event_btnResetActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
            if (jCheckBox1.isSelected()) {
            btnHapus.setEnabled(false); // Nonaktifkan tombol hapus
        } else {
            btnHapus.setEnabled(true); // Aktifkan tombol hapus
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void btnBersihkanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBersihkanActionPerformed
        // TODO add your handling code here:
        JudulText.setText("");
          areaKonten.setText("");
          JudulText.requestFocus();
    }//GEN-LAST:event_btnBersihkanActionPerformed

    private void listCatatanValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listCatatanValueChanged
        // TODO add your handling code here:
          if (!evt.getValueIsAdjusting()) { // Cegah eksekusi ganda saat nilai berubah
            int selectedIndex = listCatatan.getSelectedIndex();
            if (selectedIndex != -1) { // Pastikan ada item yang dipilih
                String selectedNote = catatan.get(selectedIndex); // Ambil catatan dari daftar
                String[] parts = selectedNote.split(";", 2); // Pisahkan judul dan isi
                String title = parts[0].replaceFirst("^\\d+\\. ", ""); // Hilangkan nomor urut dari judul
                String content = (parts.length > 1) ? parts[1] : ""; // Isi catatan jika ada

                // Tampilkan di JTextField dan JTextArea
                JudulText.setText(title);
                areaKonten.setText(content);
            }
        }
    }//GEN-LAST:event_listCatatanValueChanged
    private void tambahCatatan() {
        String title = JudulText.getText();
    String content = areaKonten.getText();

    // Pastikan judul dan konten tidak kosong
    if (!title.isEmpty() && !content.isEmpty()) {
        // Mengecek apakah judul sudah ada
        for (String note : catatan) {
            String[] parts = note.split(";", 2);
            if (parts[0].equals(title)) {
                JOptionPane.showMessageDialog(this, "Catatan dengan judul ini sudah ada.");
                return;
            }
        }

        catatan.add(title + ";" + content); // Tambahkan catatan ke ArrayList
        catatanListModel.addElement(title);  // Tambahkan judul ke model daftar
        resetField(); // Reset form setelah menambah
    } else {
        JOptionPane.showMessageDialog(this, "Judul dan konten tidak boleh kosong.");
    }



    }
  private void ubahCatatan() {
        int selectedIndex = listCatatan.getSelectedIndex();
    if (selectedIndex >= 0) {
        String title = JudulText.getText();
        String content = areaKonten.getText();

        if (!title.isEmpty() && !content.isEmpty()) {
            // Ubah catatan yang sudah ada
            catatan.set(selectedIndex, title + ";" + content);
            catatanListModel.set(selectedIndex, title); // Update judul di model
            resetField(); // Reset field setelah ubah
        } else {
            JOptionPane.showMessageDialog(this, "Judul dan konten tidak boleh kosong.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Pilih catatan yang ingin diubah.");
    }



    }
  private void hapusCatatan() {
        int selectedIndex = listCatatan.getSelectedIndex();
        if (selectedIndex >= 0) {
            catatan.remove(selectedIndex);
            catatanListModel.remove(selectedIndex);
            resetField();
        } else {
            JOptionPane.showMessageDialog(this, "Pilih catatan untuk dihapus.");
        }

    }
   private void eksporKeFileTxt() {
       JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Pilih Lokasi untuk Menyimpan File");

    // Tampilkan dialog untuk memilih lokasi file
    int userSelection = fileChooser.showSaveDialog(this);

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File fileToSave = fileChooser.getSelectedFile();

        // Tambahkan ekstensi .txt jika belum ada
        if (!fileToSave.getName().toLowerCase().endsWith(".txt")) {
            fileToSave = new File(fileToSave.getAbsolutePath() + ".txt");
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave))) {
            for (String note : catatan) { // Pastikan variabel notes adalah ArrayList<String>
                writer.write(note);
                writer.newLine();
            }
            JOptionPane.showMessageDialog(this, "Catatan berhasil diekspor ke: " + fileToSave.getAbsolutePath());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Gagal mengekspor catatan. " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    }
private void imporDariFileTxt() {
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Pilih File untuk Diimpor");
    fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

    int userSelection = fileChooser.showOpenDialog(this);
    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File fileToOpen = fileChooser.getSelectedFile();

        // Validasi ekstensi file
        if (!fileToOpen.getName().toLowerCase().endsWith(".txt")) {
            JOptionPane.showMessageDialog(this, "Hanya file dengan format .txt yang dapat diimpor.", "Format Tidak Valid", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(fileToOpen))) {
            String line;
            catatan.clear(); // Bersihkan daftar catatan sebelumnya
            catatanListModel.clear(); // Bersihkan model JList sebelumnya

            while ((line = reader.readLine()) != null) {
                // Pisahkan isi berdasarkan simbol ";"
                String[] parts = line.split(";", 2); // Split hanya pada kemunculan pertama ";"
                String title = parts[0].trim(); // Judul
                String content = (parts.length > 1) ? parts[1].trim() : ""; // Isi

                // Simpan judul dan isi catatan ke ArrayList catatan
                catatan.add(title + "; \n" + content);

                // Tambahkan hanya judul ke model JList
                catatanListModel.addElement(title);
            }

            JOptionPane.showMessageDialog(this, "Catatan berhasil diimpor dari file.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat membaca file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Import file dibatalkan.");
    }

    // Pastikan MouseListener hanya ditambahkan sekali
    if (listCatatan.getMouseListeners().length == 0) { // Hindari duplikasi listener
        listCatatan.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 1) { // Jika diklik satu kali
                    int selectedIndex = listCatatan.getSelectedIndex();
                    if (selectedIndex != -1) {
                        // Ambil data lengkap dari ArrayList catatan berdasarkan indeks
                        String selectedItem = catatan.get(selectedIndex);
                        String[] parts = selectedItem.split(";", 2); // Pisahkan judul dan isi
                        String title = parts[0];
                        String content = (parts.length > 1) ? parts[1] : "Tidak ada isi.";

                        // Tampilkan judul dan isi di JTextArea
                        areaKonten.setText("Judul: " + title + "\n\nIsi:\n" + content);
                    }
                }
            }
        });
    }
}
 
   private void tampilkanKonten() {
        int selectedIndex = listCatatan.getSelectedIndex();
        if (selectedIndex >= 0) {
            String[] parts = catatan.get(selectedIndex).split(";", 2);
            if (parts.length == 2) {
                JudulText.setText(parts[0]);
                areaKonten.setText(parts[1]);
            }
        }
    }
  
        private void resetField() {
              JudulText.setText("");
              areaKonten.setText("");

          }
                private void resetDaftar() {
            // Bersihkan data di array dan model
            catatan.clear();
            catatanListModel.clear();
            // Kosongkan input field
            resetField();
            // Tampilkan pesan konfirmasi
            JOptionPane.showMessageDialog(this, "Daftar catatan berhasil direset.");
          }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(appCatatanHarian.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(appCatatanHarian.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(appCatatanHarian.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(appCatatanHarian.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new appCatatanHarian().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField JudulText;
    private javax.swing.JTextArea areaKonten;
    private javax.swing.JButton btnBersihkan;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnKeluar;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnTambah;
    private javax.swing.JButton btnUbah;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listCatatan;
    // End of variables declaration//GEN-END:variables
}
